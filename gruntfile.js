const fs = require('fs');
const crypto = require('crypto');
const grunt = require('grunt');
const generateSpriteConfig = function (imgDir) {
    imgDir = `s-${imgDir}`;

    function getCollectiveMd5(files) {
        const md5sum = crypto.createHash('md5');
        const expandedFiles = grunt.file.expand(files),
            collectiveContent = expandedFiles.reduce(function (content, file) {
                return content + fs.readFileSync(file, 'binary');
            }, '');
        md5sum.update(collectiveContent);
        return md5sum.digest('hex')
            .slice(0, 10);
    }
    const hash = getCollectiveMd5(`src/img/${imgDir}/*.png`);
    const imgName = `${imgDir}-${hash}`;
    return {
        src: `src/img/${imgDir}/*.png`,
        dest: `public/dist/src/img/autogenerated/${imgName}.png`,
        destCss: `src/scss/base/autogenerated/${imgDir}.scss`,
        imgPath: `img/autogenerated/${imgName}.png`,
        cssVarMap: function (sprite) {
            sprite.name = `${imgDir}-${sprite.name}`;
        },
        cssTemplate: 'src/scss/base/_sprites.scss.handlebars'
    };
};
module.exports = function (grunt) {
    // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        sprite: ['img'].reduce((config, k) => Object.assign(config, {
            [k]: generateSpriteConfig(k)
        }), {}),
        htmlmin: { // Task
            dist: { // Target
                options: { // Target options
                    removeComments: true,
                    collapseWhitespace: true
                },
                files: { // Dictionary of files
                    'public/index.html': 'public/index.html',
                    'public/demo1.html': 'public/demo1.html'
                }
            }
        },
        sass: {
            options: {
                outputStyle: 'expanded'
            },
            dist: {
                files: [{
                    'public/dist/src/cui.min.css': 'src/scss/cui.scss'
                }]
            }
        },
        concat: {
            options: {
                separator: '\n'
            },
            dist: {
                files: [{
                    src: ['src/js/plugins/*.js'],
                    dest: 'public/dist/src/<%= pkg.name %>.min.js'
                }, {
                    src: ['src/js/libs/*.js'],
                    dest: 'public/dist/src/<%= pkg.name %>.lib.min.js'
                }]
            }
        },
        copy: {
            all: {
                files: [{
                    expand: true,
                    cwd: 'src/',
                    src: ['img/*.*', 'img/pin/*.*', 'fonts/*.*', 'doc/src/*.*','demo1/src/*.*','visual/src/*.*'],
                    dest: 'public/dist/src/'
                }, {
                    expand: true,
                    cwd: '',
                    src: ['favicon.ico','workbox.sw.js'],
                    dest: 'public'
                },{
                    expand: true,
                    cwd: 'src/visual/',
                    src: ['*.html'],
                    dest: 'public'
                }]
            },
            html: {
                files: [{
                    expand: true,
                    cwd: 'src/visual/',
                    src: ['*.html'],
                    dest: 'public'
                }]
            },
            css: {
                files: [{
                    expand: true,
                    cwd: 'src/',
                    src: ['doc/src/*.css','demo1/src/*.css','visual/src/*.css'],
                    dest: 'public/dist/src/'
                }]
            }
        },
        autoprefixer: {
            dist: {
                files: {
                    'public/dist/src/<%= pkg.name %>.min.css': 'public/dist/src/<%= pkg.name %>.min.css'
                }
            }
        },
        cssmin: {
            dist: {
                files: [{
                    src: ['public/dist/src/<%= pkg.name %>.min.css'],
                    dest: 'public/dist/src/<%= pkg.name %>.min.css'
                }]
            }
        },
        uglify: {
            dist: {
                files: [{
                    src: ['public/dist/src/<%= pkg.name %>.lib.min.js'],
                    dest: 'public/dist/src/<%= pkg.name %>.lib.min.js'
                }, {
                    src: ['public/dist/src/<%= pkg.name %>.min.js'],
                    dest: 'public/dist/src/<%= pkg.name %>.min.js'
                }]
            }
        },
        watch: {
            html:{
                files: ['public/*.html','src/visual/*.html'],
                tasks: ['copy','replace:dev'],
                options: {
                    debounceDelay: 10000,
                }
            },
            script: {
                files: ['src/js/plugins/*.js', 'src/doc/src/*.js'],
                tasks: ['concat:dist', 'copy','replace:dev'],
                options: {
                    debounceDelay: 10000,
                }
            },
            scss: {
                files: ['src/scss/*.scss', 'src/scss/**/*.scss', 'src/doc/src/*.css'],
                tasks: ['sass', 'copy','autoprefixer','replace:dev'],
                options: {
                    debounceDelay: 10000,
                    livereload: true,
                }
            }
        },
        replace: {
            publish: {
                src: [
                    'public/*.html',
                    'public/workbox.sw.js'
                ],
                overwrite: true,
                replacements: [{
                    from: '%RootUrl%',
                    to: 'https://shishiv30.github.io/CUI/'
                }]
            },
            dev: {
                src: [
                    'public/*.html',
                    'public/workbox.sw.js'
                ],
                overwrite: true,
                replacements: [{
                    from: '%RootUrl%',
                    to: 'http://localhost:3025/'
                }]
            }
        }
    });
    grunt.loadNpmTasks('grunt-text-replace');
    grunt.loadNpmTasks('grunt-contrib-htmlmin');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-autoprefixer');
    grunt.loadNpmTasks('grunt-spritesmith');
    grunt.loadNpmTasks('grunt-sass');
    grunt.registerTask('default', ['copy:all', 'concat', 'sprite', 'sass', 'autoprefixer', 'cssmin', 'uglify', 'htmlmin','replace:publish']);
    grunt.registerTask('dev', ['copy:css','copy:html', 'concat', 'sass', 'autoprefixer','replace:dev', 'watch']);
};
